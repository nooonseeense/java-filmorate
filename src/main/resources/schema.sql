DROP TABLE IF EXISTS FILM CASCADE;
DROP TABLE IF EXISTS GENRE CASCADE;
DROP TABLE IF EXISTS DIRECTOR CASCADE;
DROP TABLE IF EXISTS MPA CASCADE;
DROP TABLE IF EXISTS LIKE_FILM CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS FILM_GENRE CASCADE;
DROP TABLE IF EXISTS FILM_DIRECTOR CASCADE;
DROP TABLE IF EXISTS FRIEND CASCADE;
DROP TABLE IF EXISTS FEED CASCADE;
DROP TABLE IF EXISTS REVIEW CASCADE;
DROP TABLE IF EXISTS REVIEW_RATING CASCADE;

CREATE TABLE IF NOT EXISTS GENRE (
    ID          INTEGER                     NOT NULL,
    NAME        CHARACTER VARYING(50),
        CONSTRAINT GENRE_PK
            PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS GENRE_ID_UINDEX
    ON GENRE (ID);

CREATE TABLE IF NOT EXISTS DIRECTOR (
    ID          INTEGER                    AUTO_INCREMENT,
    NAME        CHARACTER VARYING(50)      NOT NULL,
        CONSTRAINT PK_DIRECTOR
            PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS DIRECTOR_ID_UINDEX
    ON DIRECTOR (ID);

CREATE TABLE IF NOT EXISTS MPA (
    ID          INTEGER                     NOT NULL,
    NAME        CHARACTER VARYING(50)       NOT NULL,
        CONSTRAINT MPA_PK
            PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS FILM (
    ID           INTEGER                    AUTO_INCREMENT,
    NAME         CHARACTER VARYING(50)      NOT NULL,
    DESCRIPTION  CHARACTER VARYING(255),
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    MPA          INTEGER,
        CONSTRAINT FILM_PK
            PRIMARY KEY (ID),
        CONSTRAINT MPA_FK
            FOREIGN KEY (MPA) REFERENCES MPA
                ON UPDATE SET NULL ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS FILM_ID_UINDEX
    ON FILM (ID);

CREATE TABLE IF NOT EXISTS FILM_GENRE (
    ID          INTEGER                     NOT NULL AUTO_INCREMENT,
    FILM_ID     INTEGER                     NOT NULL,
    GENRE_ID    INTEGER                     NOT NULL,
        CONSTRAINT FILM_GENRE_PK
            PRIMARY KEY (ID),
        CONSTRAINT FILM_FK
            FOREIGN KEY (FILM_ID) REFERENCES FILM
                ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT GENRE_FK
            FOREIGN KEY (GENRE_ID) REFERENCES GENRE
                ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS FILM_GENRE_ID_UINDEX
    ON FILM_GENRE (FILM_ID, GENRE_ID);

CREATE TABLE IF NOT EXISTS FILM_DIRECTOR (
    ID          INTEGER                     NOT NULL AUTO_INCREMENT,
    FILM_ID     INTEGER                     NOT NULL,
    DIRECTOR_ID INTEGER                     NOT NULL,
        CONSTRAINT FILM_DIRECTOR_PK
            PRIMARY KEY (ID),
        CONSTRAINT FILM_FK_DIRECTOR
            FOREIGN KEY (FILM_ID) REFERENCES FILM
                ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT DIRECTOR_PK
            FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTOR
                ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS FILM_DIRECTOR_ID_UINDEX
    ON FILM_DIRECTOR (FILM_ID, DIRECTOR_ID);

CREATE UNIQUE INDEX IF NOT EXISTS MPA_ID_UINDEX
    ON MPA (ID);

CREATE TABLE IF NOT EXISTS USERS (
    ID       INTEGER                        AUTO_INCREMENT,
    EMAIL    CHARACTER VARYING(50)          NOT NULL,
    LOGIN    CHARACTER VARYING(50)          NOT NULL,
    NAME     CHARACTER VARYING(50),
    BIRTHDAY DATE,
        CONSTRAINT USERS_PK
            PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS USER_EMAIL_UINDEX
    ON USERS (email);

CREATE UNIQUE INDEX IF NOT EXISTS USER_LOGIN_UINDEX
    ON USERS (login);

CREATE TABLE IF NOT EXISTS FRIEND (
    ID       INTEGER                        AUTO_INCREMENT,
    USER1_ID INTEGER                        NOT NULL,
    USER2_ID INTEGER                        NOT NULL,
        CONSTRAINT FRIEND_PK
            PRIMARY KEY (ID),
        CONSTRAINT FRIEND_USERS1_FK
            FOREIGN KEY (USER1_ID) REFERENCES USERS
                ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT FRIEND_USERS2_FK
            FOREIGN KEY (USER2_ID) REFERENCES USERS
                ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS FRIEND_ID_UINDEX
    ON FRIEND (USER1_ID, USER2_ID);

CREATE TABLE IF NOT EXISTS LIKE_FILM (
    ID      INTEGER                         AUTO_INCREMENT,
    FILM_ID INTEGER                         NOT NULL,
    USER_ID INTEGER                         NOT NULL,
        CONSTRAINT LIKE_FILM_PK
            PRIMARY KEY (ID),
        CONSTRAINT LIKE_FILM_FILM_FK
            FOREIGN KEY (FILM_ID) REFERENCES FILM
                ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT LIKE_FILM_USERS_FK
            FOREIGN KEY (USER_ID) REFERENCES USERS
                ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS LIKE_FILM_ID_UINDEX
    ON LIKE_FILM (ID);

CREATE UNIQUE INDEX IF NOT EXISTS USERS_ID_UINDEX
    ON USERS (ID);

CREATE TABLE IF NOT EXISTS REVIEW (
    ID           INTEGER                GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONTENT      CHARACTER VARYING(255) NOT NULL,
    IS_POSITIVE  BOOLEAN,
    USER_ID      INTEGER,
    FILM_ID      INTEGER,
    USEFUL       INTEGER,
    FOREIGN KEY (USER_ID) REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (FILM_ID) REFERENCES FILM (ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS REVIEW_RATING (
    REVIEW_ID    INTEGER,
    USER_ID      INTEGER,
    IS_POSITIVE  BOOLEAN NOT NULL,
    PRIMARY KEY (REVIEW_ID, USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (REVIEW_ID) REFERENCES REVIEW (ID) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS FEED (
    EVENT_ID   INTEGER AUTO_INCREMENT,
    TIMESTAMP  TIMESTAMP,
    USER_ID    INTEGER    NOT NULL,
    EVENT_TYPE VARCHAR(6) NOT NULL,
    OPERATION  VARCHAR(6) NOT NULL,
    ENTITY_ID  INTEGER    NOT NULL,
    PRIMARY KEY (EVENT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS
        ON UPDATE CASCADE ON DELETE CASCADE
)